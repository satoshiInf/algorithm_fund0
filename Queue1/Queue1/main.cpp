/*
 キュー（Queue）とは、一言でいうと：
 「先に入れたものが先に出てくる」箱（データ構造）
 ➡️「先入れ先出し（FIFO: First In, First Out）」のルールで動きます。
 イメージ例
 コンビニのレジの行列：
 　先に並んだ人が、先に会計して出ていきます。
 印刷待ちのファイル：
 　先に送ったファイルが先に印刷されます。
 
 #include <queue>
 この1行で std::queue という STL（標準テンプレートライブラリ） のキューを使えるようになります。
 つまり、push、pop、front、empty などは すでにC++が内部で実装してくれている 関数です。
 | メソッド        | 内容               | C++がやってくれること                 |
 | ----------- | ---------------- | ---------------------------- |
 | `q.push(x)` | キューの末尾に `x` を追加  | 要素を内部のデータ構造に挿入（たいていは`deque`） |
 | `q.pop()`   | キューの先頭を削除        | 最初の要素を削除                     |
 | `q.front()` | 先頭の要素を参照（削除はしない） | 取り出しの対象になる要素を見せてくれる          |
 | `q.empty()` | キューが空かどうかをチェック   | 要素数が0かどうかを調べて`true/false`返す  |

 この四つが使えるイメージ
 
 
 
 では、`queue<int> q;` に対して以下の操作をしたときの様子を、**絵（図）で表してみます**：
 ### 🧪 ステップ①：`q.push(10); q.push(20); q.push(30);`

 ```
 [10] [20] [30]
  ↑
  front（先頭）
 ```
 この状態で：
 * `q.front()` → **10** を表示（中身はそのまま）
 * `q.pop()` → **10 を削除**

 ---
 ### 🧪 ステップ②：`q.front()` をしただけ（見るだけ）

 [10] [20] [30]
  ↑
  front（中身は消えない）
 ```
 ➡️ 出力：**10**
 ❗中身は何も変わらない！

 ---

 ### 🧪 ステップ③：`q.pop();`（取り出して削除）

 [20] [30]
  ↑
  front（10は消えた）
 
 ➡️ `q.front()` すると今度は **20** が出てくる
 ### 🧪 ステップ④：さらに `q.pop();`
 [30]
  ↑
  front
 ### 🧪 ステップ⑤：さらに `q.pop();`
 空っぽ！
 ➡️ `q.empty()` は `true` になる
 ### ✅ まとめの図（操作ごとの変化）

 | 操作         | キューの状態         | front() の出力 |
 | ---------- | -------------- | ----------- |
 | 初期         | `[]`           | -           |
 | `push(10)` | `[10]`         | 10          |
 | `push(20)` | `[10, 20]`     | 10          |
 | `push(30)` | `[10, 20, 30]` | 10          |
 | `front()`  | `[10, 20, 30]` | 10          |
 | `pop()`    | `[20, 30]`     | 20          |
 | `pop()`    | `[30]`         | 30          |
 | `pop()`    | `[]`           | -           |

 図や表で見ると一目瞭然ですね。

 */


#include <iostream>
#include <queue>

int main()
{
    std::queue<int> q;
    q.push(10);
    q.push(20);
    q.push(30);
    
    std::cout << q.empty() <<std::endl;
    
    while(!q.empty())
    {
        std::cout<< q.front() << std::endl;
        q.pop();
    }
    
    std::cout << q.empty() <<std::endl;
  
    return 0;
}
