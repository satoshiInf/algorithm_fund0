/*


 ## ✅ 重要度の高い内容だけリスト（Binary Tree / BST 共通）

 | 分類           | 内容                                                   | 理由・用途                      |
 | ------------ | ---------------------------------------------------- | -------------------------- |
 | 🟩 ノード構造定義   | `struct Node { int data; Node* left; Node* right; }` | すべての土台となる部分。どの操作でも必須。      |
 | 🟩 DFS巡回     | `in-order / pre-order / post-order` の再帰処理            | 木構造の基礎。構造理解・出力順序に必須。       |
 | 🟩 BFS巡回     | `queue` を使った幅優先探索                                    | レベル順処理、最短経路、完全木の判定などで重要。   |
 | 🟨 BSTの挿入    | `if` を使って左か右に再帰で挿入                                   | BST構築の基本。値の整理や検索の前段階。      |
 | 🟨 BSTの探索    | `if (key < node->data)` を使った探索                       | BSTの最大の利点（高速探索）を理解するために重要。 |
 | 🟨 BSTの中間順出力 | `in-order` による昇順表示                                   | BSTのルールを可視化できる。テスト・確認にも便利。 |
 | 🟧 BSTの削除    | 3ケース（子なし・片方・両方）を理解                                   | 難所だが現場で必要になる。入門段階では後回し可。   |

 ---

 ### 🔰 最初にやるべき順番（おすすめ）

 1. **ノード定義とDFS巡回**
 2. **BFS巡回**
 3. **BSTの挿入と探索**
 4. **BSTの中間順出力（昇順確認）**
 5. **削除処理（余力があれば）**

 ---

 ### ✳️ その他は補助的な知識

 * クラス化（OOP設計）
 * 高さやノード数の計算
 * バランスBST（AVL, Red-Black Tree）
 * 再帰なしバージョン（スタック使用）

 ---

 必要なものだけ個別に深掘りできます。
 たとえば「DFSだけ詳しく」「削除だけ図付きで」なども可能です。希望があれば言ってください。

 */

#include <iostream>

int main()
{
   
    
    
    
    return 0;
}
