//
/*
 スタックの「上（top）」と「下（bottom）」のイメージについてですね。メモリ構造の話も含めて整理します。
 ## スタックのイメージ
 ### 1. ロジカルなイメージ（プログラム上）
 * **スタックは「上（top）」が増減する位置**
   * `top` が指す位置が「今一番データがあるところ」
   * `push` で上に積む → `top`が増える（または減る、実装による）
   * `pop` で上から取り出す → `top`が減る（または増える）
 * 一般的に配列インデックスが0から始まるなら、`top`は0から増えていくことが多いです。

 ### 2. メモリの構造（ハードウェア／OSの話）
 * **CPUのコールスタックなどの本物のスタックはメモリ上で「上方向」か「下方向」かはプラットフォーム依存**
   * たとえば、x86系CPUではスタックは「下方向」に伸びます（つまりアドレスが小さくなる方向に積まれる）
   * ARM系は異なることもある
 * つまり「メモリの物理的な向き」と「プログラム上でのスタックの見方」は必ずしも一致しません

 ---

 ### 3. まとめ
 | ポイント               | 備考                          |
 | ------------------ | --------------------------- |
 | プログラムの配列実装でのスタック上  | `top` が増える方向に積むことが多い        |
 | CPUのハードウェアレベルのスタック | アドレスの減少方向に積まれることが多い（例: x86） |

 ---
 ## 例：配列ベースのスタックでの `top` の変化

 ```cpp
 // top=-1 は空の状態
 push(10) → top=0, data[0]=10
 push(20) → top=1, data[1]=20
 pop()    → top=0 （20を取り出した）
 ```

 ---
 もし「メモリ構造のスタックが下方向に伸びる」の詳細やCPUアーキテクチャの話に興味があれば教えてください！
 また、プログラム実装でのスタックの話も続けられますよ。

 */
//


/*
 1. 配列の添字（インデックス）は 0 から始まる
 配列の先頭は data[0] でアクセスします。
 スタックに要素が 1つもない空の状態 を表す値として、top に 0以上の値は「要素がある」 としたい。
 top = -1 の意味
 top = -1 は 「スタックにまだ何も積まれていない空の状態」 を表す。
 これで「スタックが空かどうか」の判定が簡単になる。
 */

#include <iostream>
#define MAX 5

struct Stack
{
    int data[MAX];
    int top;
    
    Stack() : top(-1) {}
    
    void push(int x)
    {
        if(top >= MAX -1)
        {
            std::cout <<"詰めません \n" << std::endl;
        }
        data[++top] = x;
    }
    
    void pop()
    {
        if (top == -1)
        {
            std::cout <<"取り出し不可　\n" << std::endl;
            return;
        }
        top--;
    }
    
    int peek()
    {
        if(top == -1)
        {
            std::cout << "空"<< std:: endl;
        }
        else
        {
        }
        return data[top];
    }
    
    bool empty()
    {
        return top == -1;
    }
};

int main()
{
    Stack s;
    
    s.push(5);
    s.push(10);
    std::cout << "一番上"<< s.peek()<< std::endl;
    s.pop();
    s.pop();
    std::cout << "一番上"<< s.peek()<< std::endl;
    
    
    return 0;
}
